diff --git a/gc.c b/gc.c
index a72a855..4ed5858 100644
--- a/gc.c
+++ b/gc.c
@@ -139,7 +139,13 @@ typedef struct gc_profile_record {
 static double
 getrusage_time(void)
 {
-#ifdef RUSAGE_SELF
+#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_PROCESS_CPUTIME_ID)
+    struct timespec ts;
+
+    if (clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ts) == 0) {
+        return ts.tv_sec + ts.tv_nsec * 1e-9;
+    }
+#elif defined RUSAGE_SELF
     struct rusage usage;
     struct timeval time;
     getrusage(RUSAGE_SELF, &usage);
@@ -269,8 +275,8 @@ getrusage_time(void)
         (record).heap_use_size = live * sizeof(RVALUE);\
         (record).heap_total_size = total * sizeof(RVALUE);\
     } while(0)
-#define GC_PROF_INC_LIVE_NUM
-#define GC_PROF_DEC_LIVE_NUM
+#define GC_PROF_INC_LIVE_NUM objspace->heap.live_num++
+#define GC_PROF_DEC_LIVE_NUM objspace->heap.live_num--
 #endif
 
 
@@ -376,6 +382,7 @@ typedef struct rb_objspace {
 	struct heaps_header **sorted;
 	size_t length;
 	size_t used;
+	size_t allocated_objects;
         struct heaps_slot *reserve_slots;
 	RVALUE *range[2];
 	size_t live_num;
@@ -428,6 +435,7 @@ int *ruby_initial_gc_stress_ptr = &rb_objspace.gc_stress;
 #define heaps			objspace->heap.ptr
 #define heaps_length		objspace->heap.length
 #define heaps_used		objspace->heap.used
+#define allocated_objects	objspace->heap.allocated_objects
 #define lomem			objspace->heap.range[0]
 #define himem			objspace->heap.range[1]
 #define heaps_inc		objspace->heap.increment
@@ -1374,6 +1382,7 @@ rb_newobj(void)
     RANY(obj)->file = rb_sourcefile();
     RANY(obj)->line = rb_sourceline();
 #endif
+    allocated_objects++;
     GC_PROF_INC_LIVE_NUM;
 
     return obj;
@@ -3010,6 +3019,42 @@ os_each_obj(int argc, VALUE *argv, VALUE os)
 }
 
 /*
+ *  ObjectSpace.free_slots => number
+ *
+ * Returns the count of free slots available for new objects.
+ */
+static
+VALUE os_free_slots(VALUE self)
+{
+    rb_objspace_t *objspace = &rb_objspace;
+    return SIZET2NUM(heaps_used * HEAP_OBJ_LIMIT - objspace->heap.live_num);
+}
+
+/* call-seq:
+ *  ObjectSpace.live_objects => number
+ */
+static
+VALUE os_live_objects(VALUE self)
+{
+    rb_objspace_t *objspace = &rb_objspace;
+    return SIZET2NUM(objspace->heap.live_num);
+}
+
+/* call-seq:
+ *  ObjectSpace.allocated_objects => number
+ *
+ * Returns the count of objects allocated since the Ruby interpreter has
+ * started.  This number can only increase. To know how many objects are
+ * currently allocated, use ObjectSpace::live_objects
+ */
+static
+VALUE os_allocated_objects(VALUE self)
+{
+    rb_objspace_t *objspace = &rb_objspace;
+    return SIZET2NUM(allocated_objects);
+}
+
+/*
  *  call-seq:
  *     ObjectSpace.undefine_finalizer(obj)
  *
@@ -3889,6 +3934,9 @@ Init_GC(void)
     rb_mObSpace = rb_define_module("ObjectSpace");
     rb_define_module_function(rb_mObSpace, "each_object", os_each_obj, -1);
     rb_define_module_function(rb_mObSpace, "garbage_collect", rb_gc_start, 0);
+    rb_define_module_function(rb_mObSpace, "free_slots", os_free_slots, 0);
+    rb_define_module_function(rb_mObSpace, "allocated_objects", os_allocated_objects, 0);
+    rb_define_module_function(rb_mObSpace, "live_objects", os_live_objects, 0);
 
     rb_define_module_function(rb_mObSpace, "define_finalizer", define_final, -1);
     rb_define_module_function(rb_mObSpace, "undefine_finalizer", undefine_final, 1);

