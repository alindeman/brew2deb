diff --git a/carbon/lib/carbon/cache.py b/carbon/lib/carbon/cache.py
index fdd5a75..6ec183b 100644
--- a/carbon/lib/carbon/cache.py
+++ b/carbon/lib/carbon/cache.py
@@ -19,12 +19,13 @@ from carbon.conf import settings
 class MetricCache(dict):
   def __init__(self):
     self.size = 0
+    self.aggregateTypes = dict()
     self.lock = Lock()
 
   def __setitem__(self, key, value):
     raise TypeError("Use store() method instead!")
 
-  def store(self, metric, datapoint):
+  def store(self, metric, datapoint, aggregate=None):
     if self.isFull():
       increment('cache.overflow')
       return
@@ -33,6 +34,8 @@ class MetricCache(dict):
     try:
       self.lock.acquire()
       self.setdefault(metric, []).append(datapoint)
+      if aggregate:
+          self.aggregateTypes[metric] = aggregate
       self.size += 1
     finally:
       self.lock.release()
@@ -56,6 +59,9 @@ class MetricCache(dict):
     finally:
       self.lock.release()
 
+  def aggregationFor(self, metric):
+      return self.aggregateTypes.get(metric)
+
 
 MetricCache = MetricCache()
 
diff --git a/carbon/lib/carbon/protocols.py b/carbon/lib/carbon/protocols.py
index 7385e9e..542923f 100644
--- a/carbon/lib/carbon/protocols.py
+++ b/carbon/lib/carbon/protocols.py
@@ -34,25 +34,29 @@ class MetricLineReceiver(LoggingMixin, LineOnlyReceiver):
 
   def lineReceived(self, line):
     try:
-      metric, value, timestamp = line.strip().split()
+      data = line.strip().split()
+      metric, value, timestamp = data[0:3]
+      aggregate = len(data) > 3 and data[3] or None
       datapoint = ( float(timestamp), float(value) )
     except:
       log.listener('invalid line received from client %s, ignoring' % self.peerAddr)
       return
 
     increment('metricsReceived')
-    metricReceived(metric, datapoint)
+    metricReceived(metric, datapoint, aggregate=aggregate)
 
 
 class MetricDatagramReceiver(LoggingMixin, DatagramProtocol):
   def datagramReceived(self, data, (host, port)):
     for line in data.splitlines():
       try:
-        metric, value, timestamp = line.strip().split()
+        data = line.strip().split()
+        metric, value, timestamp = data[0:3]
+        aggregate = len(data) > 3 and data[3] or None
         datapoint = ( float(timestamp), float(value) )
 
         increment('metricsReceived')
-        metricReceived(metric, datapoint)
+        metricReceived(metric, datapoint, aggregate=aggregate)
       except:
         log.listener('invalid line received from client %s, ignoring' % host)
 
diff --git a/carbon/lib/carbon/writer.py b/carbon/lib/carbon/writer.py
index 5387cf0..cfd9ec3 100644
--- a/carbon/lib/carbon/writer.py
+++ b/carbon/lib/carbon/writer.py
@@ -94,6 +94,7 @@ def writeCachedDataPoints():
 
       if not dbFileExists:
         archiveConfig = None
+        aggregationMethod = None
 
         for schema in schemas:
           if schema.matches(metric):
@@ -104,11 +105,15 @@ def writeCachedDataPoints():
         if not archiveConfig:
           raise Exception("No storage schema matched the metric '%s', check your storage-schemas.conf file." % metric)
 
+        if MetricCache.aggregationFor(metric):
+          aggregationMethod = MetricCache.aggregationFor(metric)
+
         dbDir = dirname(dbFilePath)
         os.system("mkdir -p -m 755 '%s'" % dbDir)
 
-        log.creates("creating database file %s" % dbFilePath)
-        whisper.create(dbFilePath, archiveConfig)
+        log.creates("creating database file %s (aggregationMethod: %s)" % (dbFilePath, aggregationMethod))
+        whisper.create(dbFilePath, archiveConfig, aggregationMethod=aggregationMethod)
+
         os.chmod(dbFilePath, 0755)
         increment('creates')
 

